kill(all);
load("numericalio");
load("write-list-lowlevel.lisp");

load("spline2.mac");
load("integer_sequence");
rmin: 0.2;
rmax: 3.0;
L   : 5.5;
H   : 8.5;
c1: create_arc([0, 0], rmin, [90, 90+180]);
c2: create_line([0, rmin], [0, rmax]);
c3: create_arc([0, 0], rmax, [90, 90+180]);
c4: create_line([0, -rmin], [0, -rmax]);
B1: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(0, rmin, L, rmax);
B2: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(0, -rmin, L, -rmax);
B3: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, -rmax, H, -rmin);
B4: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, -rmin, H,  rmin);
B5: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, rmin, H,   rmax);
B6: gordon(c1, c2, c3, c4);

phiscale: 4;
phispl: [
[90,     90+30, 1.1983*phiscale],
'join,
[180-15, 180+15, 2.6*phiscale],
'join,
[270-30,  270, 1.1983*phiscale] ]$
phispl: replace_join(phispl)$
phi_list: spline2points(phispl)$

rscale: 4;
dmin  : 2*rmin;
radspl: [
[ rmin,  0.6*dmin, 0.01*rscale*dmin],
'join,
[ 5.0*dmin, 15.0*dmin, 0.13*rscale*dmin],
[15.0*dmin, rmax, build_spline(15*dmin, 0.13*rscale*dmin, rmax, 0.9*rscale*dmin)] ]$
radspl: replace_join(radspl)$
rad_list : spline2points(radspl)$
draw2d(point_size=3, points_joined=true, points(spline2xdx(radspl)));

from_cyl: float((second(phi_list) - first(phi_list))/180*%pi * rmin);
b2spline: [
[0, 0.1*L,  from_cyl],
'join,
[0.2*L, 0.8*L, 5*from_cyl],
'join,
[0.9*L, L    , 0.75*from_cyl]
];
b2spline: replace_join(b2spline)$
b2_list : spline2points(b2spline)$
draw2d(point_size=3, points_joined=true, points(spline2xdx(b2spline)));

from_b2: last(b2_list) - last(rest(b2_list, -1));
b4spline: [
[L, 1.1*L,  from_b2],
[1.1*L, H, build_spline(1.1*L, from_b2, H, 5*from_cyl)]
];
b4spline: replace_join(b4spline);
b4_list : spline2points(b4spline, true)$
draw2d(point_size=3, points_joined=true, points(spline2xdx(b4spline)), color='red, points(spline2xdx(b2spline)));

from_r: second(rad_list) - first(rad_list);
b5spline: [
[-rmin, -0.9*rmin,  from_r   ],
'join,
[-0.1*rmin, 0.1*rmin, from_r  ],
'join,
[0.9*rmin, rmin,  from_r ]
];
b5spline: replace_join(b5spline);
b5_list : spline2points(b5spline)$
draw2d(point_size=3, points_joined=true, points(spline2xdx(b5spline)));
draw2d(points(spline2xdx(b5spline)));

showtime: true;
R1: output_block(B1, phi_list, rad_list)$
showtime: false;

R2: output_block(B2, reverse(b2_list), rad_list)$
R3: output_block(B3, reverse(b2_list), rad_list)$

R4: output_block(B4, reverse(b4_list), reverse(rad_list))$
R5: output_block(B5, reverse(b4_list), b5_list)$
R6: output_block(B6, reverse(b4_list), rad_list)$

load("draw");
draw2d(xrange=[-rmax, H], yrange=[-rmax, H],
  point_type = 7,
  point_size=1, pxy(R1),
  color='red,   pxy(R2),
  color='green, pxy(R3),
  color='orange, pxy(R4),
  point_type=1, color='magenta, pxy(R5),
  color='violet, pxy(R6));

load("write-list-lowlevel.lisp");
/*
load("~/src/maxima-code/share/contrib/gentran/gentran.lisp");
gentran( for i: 1 thru 10 do print(i));
*/
blist: [R1, R2, R3, R4, R5, R6]$
o: openw("g.fmt");
nblock: length(blist);
printf(o, "~d~%", nblock);
for bl in blist do printf(o, "~{~d ~}", second(bl));
newline(o);
for bl in blist do (
  write_data(first(first(bl)), o),
  write_data(second(first(bl)), o),
  write_data(third(first(bl)), o));
close(o);