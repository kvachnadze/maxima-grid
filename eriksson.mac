load("pdiff");
load("opsubst");
load("lambda_fun.mac");

beta1(x, x1, x2):= 1 - ((x-x1)/(x2-x1))^2;
beta2(x, x1, x2):= ( (x-x1)/(x2-x1) - ((x-x1)/(x2-x1))^2 )*(x2-x1);
beta3(x, x1, x2):= ((x-x1)/(x2-x1))^2;
change_args_order(e):=subst(F=lambda([a, b], apply(F, [b, a])), e);

eq22:  F(u, v1)*beta1(v, v1, v2) + pderivop(F, 0, 1)(u, v1)*beta2(v, v1, v2) + F(u, v2)*beta3(v, v1, v2);
eq22b: F(u1, v)*beta1(u, u1, u2) + pderivop(F, 1, 0)(u1, v)*beta2(u, u1, u2) + F(u2, v)*beta3(u, u1, u2);
eq22:  psubst([u=s, v=t], eq22);
eq22b: psubst([u=s, v=t], eq22b);

grad_proj1(G, l):= psubst(['a=%op_proj_vars%,
  'body=psubst( ['v1=first(l), 'v2=second(l), 'F=G], eq22)],
  lambda(a, body));

grad_proj2(G, l):= psubst(['a=%op_proj_vars%,
  'body=psubst( ['u1=first(l), 'u2=second(l), 'F=G], eq22b)],
  lambda(a, body));

boolean_sum(Z,   p1, a1, p2, a2):= block([Px, Py],
  Px: apply(p1, [Z, a1]),
  Py: apply(p2, [Z, a2]),
  lambda_minus(
    lambda_sum(Px, Py),
    apply(p2, [Px, a2])));

boolean_sum(Z,   grad_proj1     , [0, 1],
                 smith_projector, ['s, [0, 1]]);