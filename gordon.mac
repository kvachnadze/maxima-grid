load("spline-utils.mac");
load("integer_sequence");
load("elements.mac");
load("spline2.mac");

/* load("spline2.mac"); */
create_rhs_output(fname, fbody)::= block([body: optimize(fbody)], buildq([body, fname],
    block(mode_declare([function(fname), u, v, q], flonum),
      body)));

gordon(c1, c2, c3, c4):=
(if not_approx_equal(c1(0), c2(0)) then error("gordon: c1(0) # c2(0)"),
  if not_approx_equal(c1(1), c4(0)) then error("gordon: c1(1) # c4(0)"),
  if not_approx_equal(c4(1), c3(1)) then error("gordon: c4(1) # c3(1)"),
  if not_approx_equal(c2(1), c3(0)) then error("gordon: c2(1) # c3(0)"),
  subst('body=
    (1-'v)*c1('u)+'v*c3('u)+(1-'u)*c2('v)+'u*c4('v)-
    ((1-'u)*(1-'v)*c1(0)+'u*'v*c3(1)+'u*(1-'v)*c4(0)+(1-'u)*'v*c3(0)),
  lambda([u, v], body)));

setup_rev(rev):=  if emptyp(rev)
then (%revx%: false, %revy%: false, %revz%: false)
else (rev: first(rev),
  if not listp(rev) or length(rev)#3 then error("rev should be a list of length 3"),
  %revx%: first(rev), %revy%: second(rev), %revz%: third(rev));

ijk2n_rev(i, j, k, nx, ny, nz):=block([prederror: true],
  mode_declare([i, j, k, nx, ny, nz], fixnum),
  if %revx% then i: nx - i + 1,
  if %revy% then j: ny - j + 1,
  if %revz% then k: nz - k + 1,
  (i-1) + (j-1)*nx + (k-1)*nx*ny);

/* fake 3D parameters*/
%Lz%: 2;
%nz%: 2;
output_block(B, c1lst, c2lst, [rev]):=block([lst1, lst2, lst3, u, v, q, nu, nv, nq, Rx, Ry, Rz, %revx%, %revy%, %revz%,
  c3lst: makelist(i, i, %nz%+1)],
  local(B, Bx, By, Bz),
  setup_rev(rev),
  define(Bx(u, v, q), create_rhs_output(Bx, float(part(B(u, v), 1)))),
  define(By(u, v, q), create_rhs_output(By, float(part(B(u, v), 2)))),
  define(Bz(u, v, q), create_rhs_output(Bz, %Lz%*q)),
  compile(Bx, By, Bz, ijk2n_rev),
  array(lst1, flonum, length(c1lst)-1),
  array(lst2, flonum, length(c2lst)-1),
  array(lst3, flonum, length(c3lst)-1),
  fillarray(lst1, list_to_zero_one(c1lst)),
  fillarray(lst2, list_to_zero_one(c2lst)),
  fillarray(lst3, list_to_zero_one(c3lst)),
  nu: length(c1lst),
  nv: length(c2lst),
  nq: length(c3lst),
  ?meval(buildq([idx: funmake('ijk2n_rev, ['i,'j,'k, nu, nv, nq]),
      n: nu*nv*nq],
    (Rx: make_array(flonum, n), Ry: make_array(flonum, n), Rz: make_array(flonum, n),
    for i: 1 thru nu do
    (print([i, nu]),
      for j: 1 thru nv do
      block([u: lst1[i-1], v: lst2[j-1], q, Rx_aux, Ry_aux],
        Rx_aux: float(Bx(u, v, 0)), Ry_aux: float(By(u, v, 0)),
        for k: 1 thru nq do
        (q: lst3[k-1],
          Rx[idx]: Rx_aux,
          Ry[idx]: Ry_aux,
          Rz[idx]: float(Bz(u, v, q)))))))),
  remarray(lst1, lst2, lst3),
   [[Rx, Ry, Rz], [nu, nv, nq]]);

output_block_simple(B, i_lst, j_lst, k_lst):= block([ni: length(i_lst),
  nj: length(j_lst), nk: length(k_lst), n, idx, Rx, Ry, Rz],
  n: ni*nj*nk,
  Rx: make_array(flonum, n), Ry: make_array(flonum, n), Rz: make_array(flonum, n),
  for i thru ni do
  for j thru nj do
  for k thru nk do (
  idx: ijk2n(i, j, i),
  [Rx[idx], Ry[idx], Rz[idx]]: B(i_lst[i], j_lst[j], k_lst[k])),
  [[Rx, Ry, Rz], [ni, nj, nk]]);

gordon_extra(c1, c2, c3, c4):=
(if not_approx_equal(c1(0), c2(0)) then error("gordon: c1(0) # c2(0)"),
  if not_approx_equal(c1(1), c4(0)) then error("gordon: c1(1) # c4(0)"),
  if not_approx_equal(c4(1), c3(1)) then error("gordon: c4(1) # c3(1)"),
  if not_approx_equal(c2(1), c3(0)) then error("gordon: c2(1) # c3(0)"),
  subst('body=
    (1-v)*c1(u1)+v*c3(u3)+(1-u)*c2(v2)+u*c4(v4)-
    ((1-u)*(1-v)*c1(0)+u*v*c3(1)+u*(1-v)*c4(0)+(1-u)*v*c3(0)),
    lambda([u, v, u1, v2, u3, v4], body)));

gordon_points(c1, c2, c3, c4, l1, l2, l3, l4):=
(if not_approx_equal(c1(0), c2(0)) then error("gordon: c1(0) # c2(0)"),
  if not_approx_equal(c1(1), c4(0)) then error("gordon: c1(1) # c4(0)"),
  if not_approx_equal(c4(1), c3(1)) then error("gordon: c4(1) # c3(1)"),
  if not_approx_equal(c2(1), c3(0)) then error("gordon: c2(1) # c3(0)"),
  if not every(listp, [l1, l2, l3, l4]) then error("`l1', `l2', `l3', `l4' must be lists"),
  if length(l1)#length(l3) then error("`l1' and `l3' must be of the same length"),
  if length(l2)#length(l4) then error("`l2' and `l4' must be of the same length"),
  block([nl1: list_to_zero_one(l1), nl2: list_to_zero_one(l2),
    nl3: list_to_zero_one(l3),      nl4: list_to_zero_one(l4),
    v_list: list_to_zero_one( makelist(i, i, 1, length(l1))),
    u_list: list_to_zero_one( makelist(i, i, 1, length(l2))),
    listarith: true, numer: true, out: []
    ],
    for i thru length(u_list) do
    block([u: part(u_list, i),
      u1: part(nl1, i),
      u3: part(nl3, i)],
      for j thru length(v_list) do
      block([v: part(v_list, j),
        v2: part(nl2, j),
        v4: part(nl4, j)],
        res: (1-v)*c1(u1)+v*c3(u3)+(1-u)*c2(v2)+u*c4(v4)-
        ((1-u)*(1-v)*c1(0)+u*v*c3(1)+u*(1-v)*c4(0)+(1-u)*v*c3(0)),
        out: cons(res, out))),
    out));

output_block_extra(B, u_do_lst, v_do_lst, u_up_lst, v_up_lst, [rev]):=block([u_array, v_array, q_array, u_array_do, v_array_do, u_array_up, v_array_up,
  u, v, v_do, v_up, u_do, u_up, q, nu, nv, nq, Rx, Ry, Rz, %revx%, %revy%, %revz%,
  q_lst: [1, 2, 3], u_lst: 1 .. length(u_do_lst), v_lst: 1 .. length(v_do_lst)],
  if length(u_do_lst)#length(u_up_lst) then error("length(u_do_lst)#length(u_up_lst)"),
  if length(v_do_lst)#length(v_up_lst) then error("length(v_do_lst)#length(v_up_lst)"),  
  local(B, Bx, By, Bz),
  setup_rev(rev),
  define(Bx(u, v, q, u_do, v_do, u_up, v_up), create_rhs_output(Bx, float(part(B(u, v, u_do, v_do, u_up, v_up), 1)))),
  define(By(u, v, q, u_do, v_do, u_up, v_up), create_rhs_output(By, float(part(B(u, v, u_do, v_do, u_up, v_up), 2)))),
  define(Bz(u, v, q, u_do, v_do, u_up, v_up), create_rhs_output(Bz, 2*q)),
  compile(Bx, By, Bz),
  array(u_array,    flonum, length(u_lst)-1),
  array(u_array_up, flonum, length(u_lst)-1),
  array(u_array_do, flonum, length(u_lst)-1),  
  array(v_array,    flonum, length(v_lst)-1),
  array(v_array_up, flonum, length(v_lst)-1),
  array(v_array_do, flonum, length(v_lst)-1),  
  array(q_array,    flonum, length(q_lst)-1),
  fillarray(u_array,    list_to_zero_one(1 .. length(u_do_lst))),
  fillarray(u_array_up, list_to_zero_one(u_up_lst)),
  fillarray(u_array_do, list_to_zero_one(u_do_lst)),  
  fillarray(v_array,    list_to_zero_one(1 .. length(v_do_lst))),
  fillarray(v_array_up, list_to_zero_one(v_up_lst)),
  fillarray(v_array_do, list_to_zero_one(v_do_lst)),  
  fillarray(q_array,    list_to_zero_one(1 .. length(q_lst))),
  nu: length(u_lst),
  nv: length(v_lst),
  nq: length(q_lst),
  ?meval(buildq([idx: funmake('ijk2n_rev, ['i,'j,'k, nu, nv, nq]),
      n: nu*nv*nq],
      (Rx: make_array(flonum, n), Ry: make_array(flonum, n), Rz: make_array(flonum, n),
        for i: 1 thru nu do
        block([u: u_array[i-1],  u_do: u_array_do[i-1], u_up: u_array_up[i-1], numer: true],
          for j: 1 thru nv do
          block([v: v_array[j-1], v_up: v_array_up[j-1], v_do: v_array_do[j-1]],
            for k: 1 thru nq do
            block([q: q_array[k-1], numer],
              Rx[idx]: Bx(u, v, q, u_do, v_do, u_up, v_up),
              Ry[idx]: By(u, v, q, u_do, v_do, u_up, v_up),
              Rz[idx]: Bz(u, v, q, u_do, v_do, u_up, v_up))))))),
  remarray(u_array, v_array, u_array_do, v_array_do, u_array_up, v_array_up, q_array),
  [[Rx, Ry, Rz], [nu, nv, nq]]);

split_block(R, dir, split_loc):= block([nlist: block2n(R), B: block2array(R), nstart, nend,
  n1size, n2size, n1, n2, n_old, n_new, R1x, R1y, R1z, R2x, R2y, R2z, listarith: true],
  local(nlist, n2list, shift, nstart, nend, B),
  if not every( lambda([q], q>1), nlist) then error("all dimension should be >1"),
  if split_loc='half then split_loc: round(part(nlist, dir)/2),

  nstart: [1, 1, 1],
  nend  :    copylist(nlist),
  nend[dir]: split_loc,
  n1size: nend-nstart+1,
  n1: xreduce("*", n1size),
  R1x: make_array(flonum, n1), R1y: make_array(flonum, n1), R1z: make_array(flonum, n1),
  for i: nstart[1] thru nend[1] do (
    print(["split_block:", i]),
    for j: nstart[2] thru nend[2] do
    for k: nstart[3] thru nend[3] do (
      n_old: apply('ijk2n, append([i, j, k], nlist)),
      n_new: apply('ijk2n, append([i, j, k] - nstart + 1, n1size)),
      R1x[n_new]: B[1][n_old],
      R1y[n_new]: B[2][n_old],
      R1z[n_new]: B[3][n_old]) ),
  
  nstart: [1, 1, 1],
  nstart[dir]: split_loc,
  nend: copylist(nlist),
  n2size: nend-nstart+1,
  n2: xreduce("*", n2size),
  
  R2x: make_array(flonum, n2), R2y: make_array(flonum, n2), R2z: make_array(flonum, n2),
  for i: nstart[1] thru nend[1] do
  for j: nstart[2] thru nend[2] do
  for k: nstart[3] thru nend[3] do (
    n_old: apply('ijk2n, append([i, j, k], nlist)),
    n_new: apply('ijk2n, append([i, j, k] - nstart + 1, n2size)),
    R2x[n_new]: B[1][n_old],
    R2y[n_new]: B[2][n_old],
    R2z[n_new]: B[3][n_old]),

  if not block_has_bc(R) then 
  [[[R1x, R1y, R1z], n1size],
   [[R2x, R2y, R2z], n2size]]
   else block([bc: block2bc(R), bc1, bc2],
     bc1: copylist(bc),
     bc1[dimanddip2face(dir, 1)]: 500,
     bc2: copylist(bc),
     bc2[dimanddip2face(dir, 0)]: 500,
     [[[R1x, R1y, R1z], n1size, bc1],
     [[R2x, R2y, R2z], n2size, bc2]]));



/*
blist: [Z]$
o: openw("g.fmt");
nblock: length(blist);
printf(o, "~d~%", nblock);
for bl in blist do printf(o, "~{~d ~}", block2n(bl));
newline(o);
for bindx thru length(blist) do block([bl: part(blist, bindx)],
  write_data(first(block2array(bl)), o),
  write_data(second(block2array(bl)), o),
  write_data(third(block2array(bl)), o),
  if bindx#length(blist) then newline(o));
close(o);
*/

/*
load("draw");
load("draw2d_expanded.mac");
load("elements.mac");
[c1, c2, c3, c4]: create_par(0, 0, 10, 10);
g: gordon(c1, c2, c3, c4);
g(0, 0);
*/