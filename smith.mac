load("spline-utils.mac");
product_condition(P, cond, i, i0, i1)::=buildq([P, cond, i, i0, i1],
  product(if cond then P else 1, i, i0, i1));

replace_list_by_element(F, arg)::= buildq([F,
  rarg: maplist( lambda([el], if listp(el) then arraymake('ll, ['i]) else el), arg)],
  F(splice(rarg)));

not_listp(e):=not listp(e);
op_projector_aux(F, arg)::=
buildq([F, arg],
  block([m, ll, ss],
    local(ll),
    ll: part(sublist(arg, listp), 1),
    ss: catch(for i thru length(arg) do
      if listp(part(arg, i)) then throw(part(%op_proj_vars%, i)),
      error("one element of `arg' should be a list")),
    m: length(ll),
    sum(
      replace_list_by_element(F, arg)*product_condition(ss - ll[j], i#j, j, 1, m)/
      product_condition(ll[i] - ll[j], i#j, j, 1, m),
      i, 1, m)));

op_projector(F, arg)::= buildq([F, arg],
  block([body: op_projector_aux(F, arg)],
    buildq([%op_proj_vars%, body], lambda([splice(%op_proj_vars%)], body))));

smith_projector(F, arg):=apply(op_projector, [F, arg]);

load("ctensor");
one_arg_to_all(v, idx):= block([out: copylist(%op_proj_vars%)], local(out), out[idx]: v, out);
pair_for_subst(a, b, idx):= funmake('F, one_arg_to_all(a, idx)) = funmake(b, deleten(%op_proj_vars%, idx));

vars_to_substlist(l):= block([res: []],
  for i thru length(l) do
  res: append(res, maplist(lambda([a, b], pair_for_subst(a, b, i)), part(l, i, 1), part(l, i, 2))),
  res);


gordon2_macro(l)::= 
  buildq([p1:  part(l, 1, 1), p2: part(l, 2, 1)],
    block([listarith: false, e, s_list],
      e: op_projector(F, [p1, 't])(s, t) + op_projector(F, ['s, p2])(s, t) -
      op_projector(op_projector(F, [p1, 't]),  ['s, p2])(s, t),
      s_list: vars_to_substlist(l),
      buildq([body: subst_with_rule(s_list, e), %op_proj_vars%], lambda([splice(%op_proj_vars%)], body))));

l: [[[0, 'h/2, 'h], [f1, f2, f3]],
[[0, 'h], [g1, g3]]];

gordon2(l):= apply(gordon2_macro, [l]);


/*
l: [[[0, 1], [c2, c4]],
    [[0, 1], [c1, c3]]];
    
l2: [[[0, 1], [g2, g4]],
[[0, 1], [g1, g3]]];

expand(gordon2(l)(s, t));

l: [[[0, 1], [g2, g4]],
    [[0, 1], [g1, g3]]];
gordon2(l);
gordon(g1, g2, g3, g4);

l: [[[0, 'h/2, 'h], [c1, c5, c3]],
    [[0, 'h], [c2, c4]]];

expr: apply('gordon2, [l]);

expr: subst([h=1, s=v, t=u], expr);

res: expand(expr(u, v) - expr_ref);
subst([c1(0)=c2(0), c4(1)=c3(1), c2(1)=c3(0)], res);
*/
