
/*
[[n1, n2, str, d1, d2, x1, x2],
 [n1, n2, str, d1, d2, x1, x2]]
*/

annotated(l):= if listp(l) and listp(first(l)) then  maplist('annotated_one, l) else annotated_one(l);
annotated_one(l):= maplist("=", ['n1, 'n2, 'str, 'd1, 'd2, 'x1, 'x2], l);

transform_defp(el):= is(el#'und);
transform_str_aux(l):=if listp(first(l)) then maplist('transform_str_aux_one, l) else transform_str_aux_one(l);
transform_str_aux_one(l):= block([str_old,
  n1: part(l, 1),
  n2: part(l, 2),
  str: part(l, 3),
  d1: part(l, 4),
  d2: part(l, 5),
  x1: part(l, 6),
  x2: part(l, 7)],
  if n2='und and str#1 and d1#d2 and every(transform_defp, [n1, str, d1, d2]) then (
    n2: round((n1*log(str)+log(d2/d1))/log(str)),
    str_old: str,
    str: (d2/d1)^(1/(n2-n1)),
    if str#str_old then dprint("warning: changing `str'")),
  if n2='und and str=1 and d1=d2 and every(transform_defp, [x1, x2, d1, d2]) then (
    n2: round((x2-x1+d1*n1)/d1),
    d1_old: d1,
    d1: (x2-x1)/(n2-n1),
    d2: d1,
    if d1#d1_old then dprint("warning: changing `d1' and `d2'")),
  if d2='und and str=1 and every(transform_defp, [d1]) then d2: d1,
  if d1='und and str=1 and every(transform_defp, [d2]) then d1: d2,
  if d2='und and str#1 and every(transform_defp, [n1, n2, str, d1]) then d2: d1*str^(n2 - n1),
  if d1='und and str#1 and every(transform_defp, [n1, n2, str, d2]) then d1: d2*str^(n1 - n2),
  if x2='und and every(transform_defp, [n1, n2, str, d1, x1]) then x2: block([simpsum: true],
    x1 + sum(d1*str^('n - n1), n, n1+1, n2)),
  if x1='und and every(transform_defp, [n1, n2, str, d2, x2]) then x1: block([simpsum: true],
    (str^n2*x2-d2*str^n1*sum(str^(n-n1),n,n1+1,n2))/str^n2),
  if str='und and every(transform_defp, [n1, n2, d1, d2]) then str: (d2/d1)^(1/(n2-n1)),
  [n1, n2, str, d1, d2, x1, x2]);

/*

set
A: B
if A='und

A: 'und;
transform_upif(A , B);

(%i2) A: 'und;
(%o2)                                 und
(%i3) transform_upif(A , B);
(%o3)                                  B
(%i4) A;
(%o4)                                  B

*/
dprint([l])::= buildq([l], if is(%se_debug%=true) then print(splice(l)) else 'done);
transform_upif(A, B)::= buildq([A, B], if A='und and B#'und then A: B else dprint("transform_upif warning: A is not equal to 'und"));

/*
[n1, n2, str, d1, d2, x1, x2]
*/
transform_str_forward(l):=block([ln: copylist(l)], local(ln, l),
  for i: 2 thru length(l) do (
    /* update `n1' */
    transform_upif(ln[i][1], l[i-1][2]),
    /* update `d1' */
    transform_upif(ln[i][4], l[i-1][5]),
    /* update `x1' */
    transform_upif(ln[i][6], l[i-1][7])
    ),
  ln);

/* [n1, n2, str, d1, d2, x1, x2] */
transform_str_generate(l):= if listp(first(l)) then
block([res: maplist('transform_str_generate_one, l)],
  apply('maplist, cons('append, res))) else transform_str_generate_one(l);
  
transform_str_generate_one(l):=block([n, x_list, str_list,
  n1: part(l, 1),
  n2: part(l, 2),
  str: part(l, 3),
  d1: part(l, 4),
  x1: part(l, 6)],
  if not integerp(n1) then error("error: `n1' should be an integer"),
  if not integerp(n2) then error("error: `n1' should be an integer"),
  if str#1 then
  x_list: create_list( x1+d1*(str^(n+1)-str^(n1+1))/((str-1)*str^n1), n, n1+1, n2)
  else
  x_list: create_list( x1 + d1*(n - n1),                              n, n1+1, n2),
  str_list: create_list(d1*str^(n - n1),                              n, n1+1, n2),
  [x_list, str_list]);

declare([transform_str_aux, transform_str_forward], evfun);