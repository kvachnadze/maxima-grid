kill(all);
load("draw");
load("numericalio");
load("write-list-lowlevel.lisp");
load("spline2.mac");
load("line_and_circle.mac");

load("integer_sequence");
rmin: 0.2;
rmax: 3.0;
L   : 5.5;
H   : 8.5;

h2  : L/2;
[c1, c2, c3, c4]: line_and_circle(rmin, rmax, h2, 180);
B1a: gordon(c1, c2, c3, c4);

cm: maplist(mirror_element, [c1, c2, c3, c4]);
B1b: apply('gordon, cm);

[c1, c2, c3, c4]: create_par(h2, rmin, L, rmax);
B2: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(h2, -rmin, L, -rmax);
B3: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, -rmax, H, -rmin);
B4: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, -rmin, H,  rmin);
B5: gordon(c1, c2, c3, c4);

[c1, c2, c3, c4]: create_par(L, rmin, H,   rmax);
B6: gordon(c1, c2, c3, c4);

phiscale: 5;
phimax:  h2*90 / (%pi*rmin/2)  + 90;
phispl: [
[0    , 15    , 2.6*phiscale],
'join,
[60   , 120    , 1.1983*phiscale],
'join,
[200   , phimax, 2.6*phiscale]];
phispl: replace_join(phispl)$
phi_list: spline2points(phispl)$
write_spline_list(phi_list, "dphi.dat");

/* draw2d(point_size=3, points_joined=true, points(spline2xdx(phispl))); */

rscale: 5;
dmin  : 2*rmin;
radspl: [
[ rmin,  0.6*dmin, 0.01*rscale*dmin],
'join,
[ 5.0*dmin, 15.0*dmin, 0.13*rscale*dmin],
[15.0*dmin, rmax, build_spline(15*dmin, 0.13*rscale*dmin, rmax, 0.9*rscale*dmin)] ]$
radspl: replace_join(radspl)$
rad_list : spline2points(radspl)$
write_spline_list(rad_list, "drad.dat");
/* draw2d(point_size=3, points_joined=true, points(spline2xdx(radspl))); */

Lp: h2 + rmin*%pi/2;
Phi: phimax;
dphi: second(phi_list) - first(phi_list);
from_cyl: float(Lp*dphi / Phi);
b2spline: [
[h2, 0.8*L,  from_cyl],
'join,
[0.9*L, L    , from_cyl/5]
];
b2spline: replace_join(b2spline)$
b2_list : spline2points(b2spline)$
write_spline_list(b2_list, "db2.dat");
/* draw2d(point_size=3, points_joined=true, points(spline2xdx(b2spline)))$ */

from_b2: last(b2_list) - last(rest(b2_list, -1))$
b4spline: [
[L, 1.1*L,  from_b2],
[1.1*L, H, build_spline(1.1*L, from_b2, H, from_cyl)]
];
b4spline: replace_join(b4spline);
b4_list : spline2points(b4spline, true)$
/* draw2d(point_size=3, points_joined=true, points(spline2xdx(b4spline)), color='red, points(spline2xdx(b2spline))); */

from_r: second(rad_list) - first(rad_list);
b5spline: [
[-rmin, -0.9*rmin,  from_r   ],
'join,
[-0.1*rmin, 0.1*rmin, from_r  ],
'join,
[0.9*rmin, rmin,  from_r ]
];
b5spline: replace_join(b5spline)$
b5_list : spline2points(b5spline)$
write_spline_list(b5_list, "db5.dat");
/* draw2d(point_size=3, points_joined=true, points(spline2xdx(b5spline)))$ */
/* draw2d(points(spline2xdx(b5spline)))$ */

R1a: output_block(B1a, reverse(phi_list), rad_list, [false, false, true])$
R1b: output_block(B1b, reverse(phi_list), rad_list, [true, false, true])$

/* R1b: block([R: first(R1a)], [[first(R), lincombarray(second(R), -1, 0), third(R)], second(R1a)])$ */

R2: output_block(B2, reverse(b2_list), rad_list, [false, false, true])$
R3: output_block(B3, reverse(b2_list), rad_list, [true, false, true])$

R4: output_block(B4, reverse(b4_list), reverse(rad_list), [true, true, true])$
R5: output_block(B5, reverse(b4_list), b5_list, [false, false, true])$
R6: output_block(B6, reverse(b4_list), rad_list, [false, false, true])$

load("write-list-lowlevel.lisp");
/*
load("~/src/maxima-code/share/contrib/gentran/gentran.lisp");
gentran( for i: 1 thru 10 do print(i));
*/
blist_sym: ['R1a, 'R1b, 'R2, 'R3, 'R4, 'R5, 'R6]$
blist: map('ev, blist_sym)$

vlistx: maplist( lambda([B], funmake('vector, maplist(lambda([v],
  rest(v, -1)), block2vector(B, 1, 0.5)))), blist)$
vlisty: maplist( lambda([B], funmake('vector, maplist(lambda([v],
  rest(v, -1)), block2vector(B, 2, 0.5)))), blist)$

/*
face: makelist(makelist(label(cons( sconcat(f, "_{", R, "}"), rest(block2facecenter(ev(R), f), -1))), f, [1, 2, 3, 4]),
  R, [last(blist_sym), second(blist_sym)])$
*/
 
load("draw");
draw2d(xrange=[-rmax, 1.1*H], yrange=[-rmax, H],
  point_type = 7,
  color='blue,      pxy(R1a),
  color='magenta,   pxy(R1b),
  color='red,   pxy(R2),
  color='green, pxy(R3),
  color='orange, pxy(R4),
  color='magenta, pxy(R5),
  color='violet, pxy(R6),
  line_width = 3,
  head_length = 0.1, color='black, vlistx, color='red, vlisty);

o: openw("g.fmt");
nblock: length(blist);
printf(o, "~d~%", nblock);
for bl in blist do printf(o, "~{~d ~}", block2n(bl));
newline(o);
for bindx thru length(blist) do block([bl: part(blist, bindx)],
  write_data(first(block2array(bl)), o),
  write_data(second(block2array(bl)), o),
  write_data(third(block2array(bl)), o),
  if bindx#length(blist) then newline(o));
close(o);




/*
(%i138) find_first([[1, 2], [3, 4]], 3);
(%o138)                             [3, 4]
*/
find_first(l, q):= catch( for el in l do if first(el)=q then throw(el), false);
decode_n2ikj(n):= if n=1 then 'i else if n=2 then 'j else if n=3 then 'k else error("n should be in [1, 2, 3]");
decode_ijk2n(idx):= if idx='i then 1 else if idx='j then 2 else if idx='k then 3 else error("idx should be in ['i, 'j, 'k]");
c2nsmbdirection(c):= block([f: face2bool(first(c)), rst: rest(c, 2), out: []],
  for idx in f do if idx#false then block([other: find_first(rst, decode_n2ikj(idx))],
    scd: decode_ijk2n(second(other)),
    if rest(other, 2)=[0, 1] then push(scd, out)
    else if rest(other, 2)=[1, 0] then push(-scd, out)
    else error("something is wrong with orientation")),
  reverse(out));

/*
blist[1][2]: [78, 46, 3];
blist[2][2]: [78, 46, 3];
blist[3][2]: [124, 46, 3];
blist[4][2]: [124, 46, 3];
blist[5][2]: [186, 46, 3];
blist[6][2]: [186, 41, 3];
blist[7][2]: [186, 46, 3];
*/

nblock: length(blist);
nwin  : makelist(6, iblock, nblock);
npbc  : makelist(0, iblock, nblock);
nbbc  : makelist(0, iblock, nblock);
mshwin : makelist(makelist(1, iwin, nwin[iblock]), iblock, nblock);
mshwbc : makelist(makelist('und, iwin, nwin[iblock]), iblock, nblock);
mshwbc[1]: [500, 500, 300, 130, 410, 410];
mshwbc[2]: [500, 500, 300, 130, 410, 410];
mshwbc[3]: [500, 500, 300, 130, 410, 410];
mshwbc[4]: [500, 500, 300, 130, 410, 410];
mshwbc[5]: [500, 230, 500, 130, 410, 410];
mshwbc[6]: [230, 300, 500, 500, 410, 410];
mshwbc[7]: [230, 500, 500, 130, 410, 410];

blkcon : makelist([], i, nblock);
blkfac : makelist([], i, nblock);
blkdef : makelist([], i, nblock);
blkdir : makelist([], i, nblock);
mshwbcfam : makelist(makelist(0, iwin, nwin[iblock]), iblock, nblock);
for iblock1 thru nblock do
for iblock2 thru nblock do block(
  [bl1: part(blist, iblock1),
   bl2 : part(blist, iblock2), c],
  c: blocks2faces_and_directions(bl1, bl2),
  if not emptyp(c) then block([my_face: first(c), other_face: second(c)], 
    mshwbc[iblock1][my_face]:  500,
    blkcon[iblock1]: cons([my_face, iblock2], blkcon[iblock1]),
    blkfac[iblock1]: cons([my_face, other_face], blkfac[iblock1]),
    blkdef[iblock1]: cons([my_face, win2idx(bl1, my_face)], blkdef[iblock1]),
    blkdir[iblock1]: cons([my_face, c2nsmbdirection(c)], blkdir[iblock1]),
    nbbc[iblock1]: nbbc[iblock1] + 1,
    print(c)));

/* sort by `my_face' value */
blkcon: maplist(  lambda([q], maplist('second, q)), maplist('sort, blkcon));
blkfac: maplist(  lambda([q], maplist('second, q)), maplist('sort, blkfac));
blkdef: maplist(  lambda([q], maplist('second, q)), maplist('sort, blkdef));
blkdir: maplist(  lambda([q], maplist('second, q)), maplist('sort, blkdir));

mshwdf: makelist(makelist('und, iwin, nwin[iblock]), iblock, nblock);
for iblock thru nblock do 
for iwin    thru nwin[iblock] do
block([bl: part(blist, iblock), listarith: true],
  mshwdf[iblock][iwin]: win2idx(bl, iwin));

mshtitle: "Splitter_scale4";
mshcomment: "Single splitter mesh";
mshtype: "2D with 2 cells in z-direction";
mshpers: "Vachnadze/Litvinov";
cref:    1.0;
sref:    1.0;
xyzref: [0.0, 0.0, 0.0];

with_stdout("g.topo",
  block([listarith: true],
    printf(true, "~80a~%", mshtitle),
    printf(true, "~80a~%", mshcomment),
    printf(true, "~30a~%", mshtype),
    printf(true, "~30a~%", mshpers),
    printf(true, "~25,17g ~%",   cref),
    printf(true, "~25,17g ~%",   sref),
    printf(true, "~{~25,17g ~}~%",   xyzref),
    printf(true, "~12d~%", nblock),
    for iblock thru nblock do (
      el1: part(blist, iblock),
      printf(true, "~{~12d~}   ~a~5d~%",
        block2n(el1)-1, "Block:", iblock),
      printf(true, "~{~12d~}~%", apart(iblock, nwin, npbc, nbbc)),
      printf(true, "~{~12d~}~%", mshwin[iblock]),
      printf(true, "~{~12d~}~%", mshwbc[iblock]),
      printf(true, "~{~12d~}~%", mshwbcfam[iblock]),
      printf(true, "~{~12d~}~%", flatten(mshwdf[iblock])),
      printf(true, "~{~12d~}~%", blkcon[iblock]),
      printf(true, "~{~12d~}~%", blkfac[iblock]),
      printf(true, "~{~12d~}~%", flatten(blkdef[iblock])),
      printf(true, "~{~12d~}~%", flatten(blkdir[iblock])))));