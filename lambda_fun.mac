lambda_args(la):= first(args(la));
lambda_body(la):= second(args(la));
lambdap(la):= not atom(la) and part(la, 0)='lambda;
atom_to_lambda(la):=subst('a=gensym(), subst('body=la(a), lambda([a], body)));

lambda_op(la1, la2, fun):=
(if not lambdap(la1) then la1: atom_to_lambda(la1),
  if not lambdap(la2) then la2: atom_to_lambda(la2),
  block([farg: lambda_args(la1), body1: lambda_body(la1), body2],
    body2: psubst(maplist("=", lambda_args(la2), farg), lambda_body(la2)),
    psubst(['body=fun(body1, body2), 'a=farg], lambda(a, body))));

lambda_multiply_constant(la1, C):=
block([la2: psubst(['body=C, 'a=gensym()], lambda([a], body))],
    lambda_op(la1, la2, "*"));

lambda_repeat(la1, la2):=
(if not lambdap(la1) then la1: atom_to_lambda(la1),
  if not lambdap(la2) then la2: atom_to_lambda(la2),
  block([arg1: lambda_args(la1), arg2: lambda_args(la2),
    body2: lambda_body(la2), y, body_new],
    y: psubst(first(arg2)=first(arg1), body2),
    body_new: psubst(first(arg1)=y, lambda_body(la1)),
    psubst(['body=body_new, 'a=arg1], lambda(a, body))));

lambda_diff(la1, [opt]):= block([
  d:    if length(opt)>=2 then part(opt, 2) else 1,
  ivar: if length(opt)>=1 then part(opt, 1) else 1],
  lambda_diff_full(la1, ivar, d));
  
lambda_diff_full(la1, ivar, d):=
(if not lambdap(la1) then la1: atom_to_lambda(la1),
  block([body1: lambda_body(la1), arg1: lambda_args(la1), body_new],
    body_new: diff(body1, part(arg1, ivar), d),
    psubst(['body=body_new, 'a=arg1], lambda(a, body))));

lambda_sum(la1, la2):=lambda_op(la1, la2, "+");
lambda_minus(la1, la2):=lambda_op(la1, la2, "-");
