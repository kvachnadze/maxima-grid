load("lambda_fun.mac");
load("list_utils.mac");

/* from abs_integrate.mac */
safe_op(e) := block([inflag : true], if mapatom(e) then false else op(e));
  
/* create parameteric line from [x1, y1] to [x2, y2]
p: create_line(0, 0, 1, 2);
draw2d(parametric( p(s)[1], p(s)[2], s, 0, 1));
*/
create_line([l]):=apply('create_line_aux, flatten(l));
create_line_aux(x1, y1, x2, y2):= subst('body=['s*(x2-x1)+x1,'s*(y2-y1)+y1], lambda([s], body));

/* create parameteric arc with a center [xc, yc]
load("draw");
p: create_arc( [1, 1], 2, 45, 45+180 );
draw2d(xrange=[-3, 3], yrange=[-3, 3], parametric( p(s)[1], p(s)[2], s, 0, 1));
*/
create_arc([l]):=apply('create_arc_aux, flatten(l));
create_arc_aux(xc, yc, radius, phi_start, phi_end):= subst('body=
  block([sc: (phi_end - phi_start)*'s + phi_start],
    [xc + radius*cos(sc/180*%pi), yc + radius*sin(sc/180*%pi)]),
  lambda([s], body));

element_length(c):= block([x, y, expr, body: lambda_body(c), arg: first(lambda_args(c))],
  x: part(body, 1),
  y: part(body, 2),
  expr: sqrt(diff(x, arg)^2 + diff(y, arg)^2),
  integrate(expr, s, 0, 1));

join_elements(el1, L1, el2, L2):= block([body],
  body: psubst(['pivot=L1/(L1+L2),
    'sc1=(L1+L2)/L1,
    'sc2=(L1+L2)/L2],
    'lambda_subst(['sc1*'s], el1)* charfun('s<'pivot) + 'lambda_subst([('s - 'pivot)*'sc2], el2) * charfun('s>='pivot)),
  subst('body=ev(body, 'lambda_subst),
    lambda([s], body)));

mirror_element(c):= block([l: lambda_subst(['s], c)],
  if not listp(l) or length(l)#2 then error("c(s) should return a two elements list"),
  psubst(['x=first(l), 'y=-second(l)],
    lambda([s], [x, y])));

create_par(x0, y0, x1, y1):= block([c1, c2, c3, c4],
  c1: create_line(x1, y0, x0, y0),
  c2: create_line(x1, y0, x1, y1),
  c3: create_line(x1, y1, x0, y1),
  c4: create_line(x0, y0, x0, y1),
  [c1, c2, c3, c4]);

load("draw");
draw_element(c):= block([s], buildq([c], parametric( part(c(s), 1), part(c(s), 2), s, 0, 1)));
draw_vector(c):= block([body],
  body: subst('k=1/10,
    [vector('c(1-k), 'c(1)-'c(1-k)), vector('c(0), 'c(k)-'c(0))]),
  ev(body, 'c));

expand_element(el):= block([c: first(args(el))],
  append([draw_element(c)], rest(args(el)), draw_vector(c)));

draw_elementp(el):= block([prederror: true], is(nounify(safe_op(el))=nounify('element)));
draw2d_elements([l])::= block([nl: maplist_append_when( expand_element, draw_elementp, l)],
    buildq([nl],
  draw2d(splice(nl))));

/*
[c1, c2, c3, c4]: create_par(0, 0, 10, 10);
draw2d_elements(
  head_length=0.2,
  xrange=[-1, 11], yrange=[-1, 11],
  'color='red, element(c1), color='green, element(c2), 'color='blue, element(c3), 'color='magenta, element(c4));
*/
