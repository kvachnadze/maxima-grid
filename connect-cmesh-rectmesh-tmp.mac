kill(all);
load("draw");
load("numericalio");
load("write-list-lowlevel.lisp");
load("spline2.mac");
load("two_cirlces.mac");
load("lambda_fun.mac");
load("se_special.mac");
load("write_topology.mac");

load("integer_sequence");
k_rescale: 0.31116308;
rmin: 0.2*k_rescale;
rmax: 3.0*k_rescale;
L   : 5.5*k_rescale;
H   : 11.5*k_rescale;
h2  : L/2;

phiscale: 10;
phimax:   270;
phispl: [[0    , phimax,    0.4*phiscale]];
phispl: replace_join(phispl)$
phi_list: spline2points(phispl)$
write_spline_list(phi_list, "dphi.dat");

rscale: 3;
dmin  : 2*rmin;
radspl: [
[ rmin,  0.6*dmin, 0.01*rscale*dmin],
'join,
[ 5.0*dmin, 15.0*dmin, 0.13*rscale*dmin],
[15.0*dmin, rmax, build_spline(15*dmin, 0.13*rscale*dmin, rmax, 0.9*rscale*dmin)] ]$
radspl: replace_join(radspl)$
rad_list : spline2points(radspl)$
write_spline_list(rad_list, "drad.dat");

[c1, c2, c3, c4]: two_cirlces(rmin, rmax, 270);
B1: gordon(c1, c2, c3, c4);
R1: output_block(B1, reverse(phi_list), rad_list, [false, false, true])$

/* maximum stretching */
pstr: 0.95;
d1: first(blockijk2xyz_withcode(R1, [1, 1, 1])) - first(blockijk2xyz_withcode(R1, [2, 1, 1]));
d2: first(blockijk2xyz_withcode(R1,  [1, 'max, 1])) - first(blockijk2xyz_withcode(R1, [2, 'max, 1]));
dfin: (8*d1+2*d2)/10;
dmax: 8/10*d2;
[up_list, do_list]: se_special(0, d1, d2, pstr, dfin, dmax)$
Lstart: last(up_list);
if Lstart>9/10*L then error("Lstart should be smaller than 9/10*L");

Lfine: 9/10*L;
r2spl: [
[ Lstart,  Lfine, build_spline(Lstart, dfin,  Lfine, dfin/2)],
[ Lfine,   L, dfin/2]]$
r2spl: replace_join(r2spl)$
r2_list : spline2points(r2spl)$

up_list: append(up_list, rest(r2_list))$
do_list: append(do_list, rest(r2_list))$

/*
draw2d( points_joined=true, point_size=4, points(up_list), 'color='red, points(do_list));
draw2d( points_joined=true, point_size=4, points(up_list));
*/

[c1, c2, c3, c4]: create_par(0, rmin, last(up_list), rmax)$
c1n: lambda_repeat(c1, lspline_simple( reverse(do_list)))$
c3n: lambda_repeat(c3, lspline_simple( reverse(up_list)))$
B2: gordon(c1n, c2, c3n, c4)$
R2: output_block(B2, 1 .. length(up_list), rad_list, [false, false, true])$

cm: maplist('mirror_element, [c1n, c2, c3n, c4])$
B3: apply('gordon, cm)$
R3: output_block(B3, 1 .. length(up_list), rad_list, [false, true, true])$

from_b2: last(up_list) - last(rest(up_list, -1))$
b4spline: [
[L, 1.1*L,  from_b2],
[1.1*L, H, build_spline(1.1*L, from_b2, H, 3*from_b2)]
];
b4spline: replace_join(b4spline);
b4_list : spline2points(b4spline, true)$
[c1, c2, c3, c4]: create_par(L, -rmax, H, -rmin);
B4: gordon(c1, c2, c3, c4);
R4: output_block(B4, reverse(b4_list), reverse(rad_list), [false, false, true])$

[c1, c2, c3, c4]: create_par(L, rmin, H,   rmax);
B6: gordon(c1, c2, c3, c4);
R6: output_block(B6, reverse(b4_list), rad_list, [false, false, true])$

from_r: second(rad_list) - first(rad_list);
b5spline: [
[-rmin, -0.9*rmin,  from_r   ],
'join,
[-0.1*rmin, 0.1*rmin, 2*from_r  ],
'join,
[0.9*rmin, rmin,  from_r ]
];
b5spline: replace_join(b5spline)$
b5_list : spline2points(b5spline)$
write_spline_list(b5_list, "db5.dat");
[c1, c2, c3, c4]: create_par(L, -rmin, H,  rmin);
B5: gordon(c1, c2, c3, c4);
R5: output_block(B5, reverse(b4_list), b5_list, [false, false, true])$

load("write-list-lowlevel.lisp");
blist_sym: ['R1, 'R2, 'R3, 'R4, 'R5, 'R6]$
blist: map('ev, blist_sym)$
vlistx: maplist( lambda([B], funmake('vector, maplist(lambda([v],
  rest(v, -1)), block2vector(B, 1, 0.5)))), blist)$
vlisty: maplist( lambda([B], funmake('vector, maplist(lambda([v],
          rest(v, -1)), block2vector(B, 2, 0.5)))), blist)$

load("draw");
draw2d(xrange=[-rmax*1.1, 1.1*H], yrange=[-rmax*1.1, H],
  point_type = 7,
  color='blue,     pxy(R1),
  color='red,      pxy(R2),
  color='orange,   pxy(R3),
  color='magenta,   pxy(R4),
  color='green,    pxy(R5),
  color='brown,    pxy(R6),
  line_width = 3,
  head_length = 0.05,
  color='black, vlistx, color='red, vlisty);

mshwbc : makelist([], i, length(blist));
mshwbc[1]: [500, 500, 300, 130, 410, 410];
mshwbc[2]: [500, 500, 300, 412, 410, 410];
mshwbc[3]: [500, 500, 412, 300, 410, 410];
mshwbc[4]: [230, 500, 412, 500, 410, 410];
mshwbc[5]: [230, 300, 500, 500, 410, 410];
mshwbc[6]: [230, 500, 500, 412, 410, 410];
write_topology(blist, mshwbc, "g.topo")$
 
